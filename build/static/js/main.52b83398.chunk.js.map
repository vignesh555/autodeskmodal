{"version":3,"sources":["components/Card/Card.js","components/Title/Title.js","hooks/useInfiniteScroll.js","modules/Documentation/Documentation.js","modules/DeveloperGuide/DeveloperGuide.js","modules/Intro/Intro.js","modules/Reference/Reference.js","modules/routes.js","serviceWorker.js","index.js"],"names":["CardLayout","props","item","Card","className","Body","Title","Image","alt","title","src","image","source","Text","body","href","Container","useInfiniteScroll","callback","useState","isFetching","setIsFetching","handleScroll","window","innerHeight","pageYOffset","document","offsetHeight","useEffect","addEventListener","removeEventListener","Documentation","apiList","setApiList","setTimeout","a","axios","get","resp","items","data","Row","xs","md","lg","length","map","index","Col","key","Spinner","animation","role","DeveloperGuide","pageTitle","useParams","Intro","Reference","App","path","component","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kaAuBeA,MAhBf,SAAoBC,GAAQ,IAClBC,EAASD,EAATC,KACR,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,iBACd,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAY,kBAACC,EAAA,EAAD,CAAOC,IAAKN,EAAKO,MAAOC,IAAKR,EAAKS,MAAMC,SAAWV,EAAKO,OACpE,kBAACN,EAAA,EAAKU,KAAN,CAAWT,UAAU,YAAYF,EAAKY,MAEtC,uBAAGC,KAAI,4BAAuBb,EAAKO,MAA5B,UAA2CL,UAAU,yBAA5D,QAAyF,kBAAC,IAAD,CAAgBA,UAAU,UACnH,uBAAGW,KAAI,4BAAuBb,EAAKO,MAA5B,UAA2CL,UAAU,yBAA5D,oBAAqG,kBAAC,IAAD,CAAgBA,UAAU,UAC/H,uBAAGW,KAAI,4BAAuBb,EAAKO,MAA5B,cAA+CL,UAAU,aAAhE,gBAAyF,kBAAC,IAAD,CAAgBA,UAAU,a,MCF5GE,MAVf,SAAeL,GACb,OACE,yBAAKG,UAAU,aACb,kBAACY,EAAA,EAAD,KACE,4BAAKf,EAAMQ,UCmBJQ,EA1BW,SAAAC,GAAa,IAAD,EACAC,oBAAS,GADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAG9BC,EAAe,WAEjBC,OAAOC,YAAcD,OAAOE,aAC5BC,SAASZ,KAAKa,aAAe,GAE7BN,GAAc,IAelB,OAXAO,qBAAU,WAER,OADAL,OAAOM,iBAAiB,SAAUP,GAC3B,kBAAMC,OAAOO,oBAAoB,SAAUR,MACjD,IAEHM,qBAAU,WACHR,GACLF,MAEC,CAACE,IAEG,CAACA,EAAYC,I,MCiCPU,MA9Cf,WAA0B,IAAD,EACOZ,mBAAS,IADhB,mBAChBa,EADgB,KACPC,EADO,OAEahB,GAEpC,WACEI,GAAc,GACda,WAAU,sBAAC,8BAAAC,EAAA,sEACUC,IAAMC,IAAI,iCADpB,OACHC,EADG,OAEHC,EAFG,sBAESP,GAFT,YAEqBM,EAAKE,KAAKD,QACxCN,EAAWM,GACXlB,GAAc,GAJL,2CAKR,QAXkB,mBAEhBD,EAFgB,KAEJC,EAFI,KAcvB,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CAAOK,MAAM,kBACb,yBAAKL,UAAU,WACb,kBAACY,EAAA,EAAD,KACE,yBAAKZ,UAAU,gBACb,+CACA,yFAGJ,kBAACY,EAAA,EAAD,KACE,kBAACyB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACpBZ,EAAQa,OAAS,GAChBb,EAAQc,KAAI,SAAC5C,EAAM6C,GAAP,OACV,kBAACC,EAAA,EAAD,CAAKC,IAAG,eAAUF,IAChB,kBAAC,EAAD,CAAM7C,KAAMA,UAKtB,kBAACc,EAAA,EAAD,CAAWZ,UAAU,qBAClBgB,GACC,kBAAC8B,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMhD,UAAU,WAAhB,mBCvCCiD,EALQ,WAAO,IACpBC,EAAcC,cAAdD,UACR,OAAQ,kBAAC,EAAD,CAAO7C,MAAK,6BAAwB6C,MCG/BE,EALD,WAAO,IACXF,EAAcC,cAAdD,UACR,OAAQ,kBAAC,EAAD,CAAO7C,MAAK,mBAAc6C,MCGrBG,EALG,WAAO,IACfH,EAAcC,cAAdD,UACR,OAAQ,kBAAC,EAAD,CAAO7C,MAAK,uBAAkB6C,MCCzB,SAASI,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,2BAA2BC,UAAW7B,IAClD,kBAAC,IAAD,CAAO4B,KAAK,qCAAqCC,UAAWJ,IAC5D,kBAAC,IAAD,CAAOG,KAAK,qCAAqCC,UAAWP,IAC5D,kBAAC,IAAD,CAAOM,KAAK,yCAAyCC,UAAWH,IAChE,kBAAC,IAAD,CAAUE,KAAK,IAAIE,GAAG,+BCJVC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFhC,SAAS2C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52b83398.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";  \nimport { FaChevronRight } from 'react-icons/fa';\n\nimport \"./Card.scss\"\n\nfunction CardLayout(props) {\n  const { item } = props;\n  return (\n    <Card className=\"cardContainer\">\n      <Card.Body>\n        <Card.Title><Image alt={item.title} src={item.image.source} />{item.title}</Card.Title>\n        <Card.Text className=\"cardText\">{item.body}</Card.Text>\n\n        <a href={`/developer/en/api/${item.title}/intro`} className=\"boderBottom linkWidth\">Intro<FaChevronRight className=\"icon\" /></a>\n        <a href={`/developer/en/api/${item.title}/guide`} className=\"boderBottom linkWidth\">Developer's guide<FaChevronRight className=\"icon\" /></a>\n        <a href={`/developer/en/api/${item.title}/reference`} className=\"linkWidth\">API reference<FaChevronRight className=\"icon\" /></a>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default CardLayout;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\n\nimport \"./Title.scss\";\n\nfunction Title(props) {\n  return (\n    <div className=\"pageTitle\">\n      <Container>\n        <h4>{props.title}</h4>\n      </Container>\n    </div>\n  );\n}\n\nexport default Title;\n","import { useEffect, useState } from \"react\";\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(true);\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + window.pageYOffset >=\n      document.body.offsetHeight - 2\n    ) {\n      setIsFetching(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    callback();\n    // eslint-disable-next-line\n  }, [isFetching]);\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n","import React, { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport axios from \"axios\";\n\nimport Card from \"../../components/Card\";\nimport Title from \"../../components/Title\";\nimport useInfiniteScroll from \"../../hooks/useInfiniteScroll\";\nimport \"./Documentation.scss\";\n\nfunction Documentation() {\n  const [apiList, setApiList] = useState([]);\n  const [isFetching, setIsFetching] = useInfiniteScroll(loadMoreItems);\n\n  function loadMoreItems() {\n    setIsFetching(true);\n    setTimeout(async () => {\n      const resp = await axios.get(\"http://localhost:3000/db.json\");\n      const items = [...apiList, ...resp.data.items];\n      setApiList(items);\n      setIsFetching(false);\n    }, 1000);\n  }\n\n  return (\n    <div className=\"App\">\n      <Title title=\"Documentation\" />\n      <div className=\"content\">\n        <Container>\n          <div className=\"contentTitle\">\n            <h4>APIs & Services</h4>\n            <p>Access information on how to use Forge APIs and Services</p>\n          </div>\n        </Container>\n        <Container>\n          <Row xs={1} md={2} lg={3}>\n            {apiList.length > 0 &&\n              apiList.map((item, index) => (\n                <Col key={`card_${index}`}>\n                  <Card item={item} />\n                </Col>\n              ))}\n          </Row>\n        </Container>\n        <Container className=\"loaderCenterAlign\">\n          {isFetching && (\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          )}\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default Documentation;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Title from \"../../components/Title\";\n\nconst DeveloperGuide = () => {\n  const { pageTitle } = useParams();\n  return (<Title title={`Developer guide to ${pageTitle}`} />);\n};\n\nexport default DeveloperGuide;\n","import React from \"react\";\n\nimport { useParams } from \"react-router-dom\";\nimport Title from \"../../components/Title\";\n\nconst Intro = () => {\n  const { pageTitle } = useParams();\n  return (<Title title={`Intro to ${pageTitle}`} />);\n};\n\nexport default Intro;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Title from \"../../components/Title\";\n\nconst Reference = () => {\n  const { pageTitle } = useParams();\n  return (<Title title={`Reference to ${pageTitle}`} />);\n};\n\nexport default Reference;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Documentation from \"./Documentation\";\nimport DeveloperGuide from \"./DeveloperGuide\";\nimport Intro from \"./Intro\";\nimport Reference from \"./Reference\";\n\nexport default function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/developer/documentation\" component={Documentation} />\n        <Route path=\"/developer/en/api/:pageTitle/intro\" component={Intro} />\n        <Route path=\"/developer/en/api/:pageTitle/guide\" component={DeveloperGuide} />\n        <Route path=\"/developer/en/api/:pageTitle/reference\" component={Reference} />\n        <Redirect path=\"/\" to=\"/developer/documentation\" />\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './modules/routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}